[{"path":"https://github.com/MonashARP/game-package-wallabies/articles/blackjack.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Blackjack instruction","text":"Welcome Blackjack game vignette! package allows simulate full round Blackjack multiple players. Players can perform actions like hitting, standing, splitting, doubling , even making insurance bets. game follows classic Blackjack rules, enhancements player interaction. vignette walk : overview Blackjack rules install load package play game interactively use individual functions","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/blackjack.html","id":"setup","dir":"Articles","previous_headings":"Introduction","what":"⚙️ Setup","title":"Blackjack instruction","text":"start using Blackjack package, need install . haven’t done yet, can install package GitHub. detailed instructions, please refer installation guide homepage. installed, can load package using:","code":"library(Blackjack) library(vctrs)"},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/blackjack.html","id":"blackjack-rules","dir":"Articles","previous_headings":"","what":"Blackjack Rules","title":"Blackjack instruction","text":"Blackjack, also known 21, popular card game played dealer one players. goal game hand total closer 21 dealer’s hand, without going 21 (known “busting”).","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/blackjack.html","id":"the-card-values","dir":"Articles","previous_headings":"Blackjack Rules","what":"The Card Values","title":"Blackjack instruction","text":"Aces: Can worth 1 11, depending hand. Number cards (2-10): Worth face value. Face cards (J, Q, K): Worth 10 points .","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/blackjack.html","id":"gameplay","dir":"Articles","previous_headings":"Blackjack Rules","what":"Gameplay","title":"Blackjack instruction","text":"Dealing Cards: player dealt two cards, dealer dealt two cards. One dealer’s cards face-(“upcard”), face-(“hole card”). Player’s Turn: player takes turns play hand. following options: Hit: Draw another card deck improve hand. Stand: Keep current hand end turn. Double : Double bet receive exactly one card. Split: player two cards rank, can split two hands continue playing hand individually. Dealer’s Turn: players completed turns, dealer reveals hole card plays according rules: dealer must hit total 16 less. dealer must stand total 17 higher. dealer gets 21, “Blackjack.” Winning: player wins hand total closer 21 dealer’s without busting. player dealer total, ’s tie (push). dealer busts, player wins.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/blackjack.html","id":"start-experimenting-and-playing-the-game","dir":"Articles","previous_headings":"","what":"▶️ Start experimenting and playing the game!","title":"Blackjack instruction","text":"using play_blackjack(), able enter world Blackjack! function allows play full interactive game Blackjack. function handles following: Setup: Prompts user number players decks, initializes deck hands. Gameplay: Guides player turn, including options hit, stand, double , split. Dealer’s Play: Handles dealer’s turn according Blackjack rules. Outcome: Announces winner player based final hand values.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/blackjack.html","id":"example-gameplay","dir":"Articles","previous_headings":"▶️ Start experimenting and playing the game!","what":"Example Gameplay","title":"Blackjack instruction","text":"play full interactive round Blackjack, run: ’s typical interactive session might look like running play_blackjack(): 🎮 Welcome Blackjack! 🎲 many players? 3 🃏 many decks? (Enter default): 🤵 Dealer shows: 3♣ 👤 Player1 initial hand: 9♦, Q♠ ➤ want surrender? (y/n): n ➤ Current hand: 9♦, Q♠ ( 19 ) ➤ Hit stand? (h/s): h ➤ Current hand: 9♦, Q♠, ♥ ( 20 ) ➤ Hit stand? (h/s): s → Final score: 20 👤 Player2 initial hand: 8♦, 7♣ ➤ want surrender? (y/n): n ➤ Current hand: 8♦, 7♣ ( 15 ) ➤ Hit stand? (h/s): h → Final score: 25 💥 BUST! 👤 Player3 initial hand: K♥, Q♣ ➤ want surrender? (y/n): n ➤ Current hand: K♥, Q♣ ( 20 ) ➤ Hit stand? (h/s): s → Final score: 20 🤵 Dealer’s full hand: 3♣, 9♦ ✅ Dealer’s final hand: 3♣, 9♦, 10♠ ➡ Dealer score: 22 💥 BUST! 👤 Player1 : Win 👤 Player2 : Lose 👤 Player3 : Win Created 2025-06-05 reprex v2.1.1 example illustrates multiple players can take actions (hit, stand, surrender), dealer automatically plays hand. Results calculated based Blackjack rules shown end round.","code":"play_blackjack()"},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/blackjack.html","id":"using-helper-functions","dir":"Articles","previous_headings":"","what":"🧩 Using Helper Functions","title":"Blackjack instruction","text":"can also manually test explore game logic using core functions: Create Deck Deal Cards Score Hand Split Hand Surrender Double Dealer Play","code":"deck <- create_board(num_decks = 1) head(deck) #> [1] \"Q♠\"  \"6♦\"  \"3♣\"  \"10♠\" \"10♥\" \"Q♦\" hands <- deal_cards(num_players = 2, deck) hands$player_hands #> [[1]] #> [1] \"Q♠\" \"6♦\" #>  #> [[2]] #> [1] \"3♣\"  \"10♠\" hands$dealer_hand #> [1] \"10♥\" score_hand(c(\"A♠\", \"K♦\")) # Returns 21 #> [1] 21 player_split(c(\"8♠\", \"8♦\")) #> $can_split #> [1] TRUE #>  #> $hands #> $hands[[1]] #> [1] \"8♠\" #>  #> $hands[[2]] #> [1] \"8♦\" surrender_hand(c(\"10\", \"6\"), TRUE) #> $status #> [1] \"surrendered\" #>  #> $payout #> [1] 0.5 #>  #> $message #> [1] \"Player surrendered. Half bet lost.\" dd_result <- double_down(c(\"5♠\", \"6♠\"), create_board()) dd_result$new_hand #> [1] \"5♠\" \"6♠\" \"8♦\" dealer_play(c(\"7♠\", \"9♦\"), create_board()) #> $dealer_hand #> [1] \"7♠\" \"9♦\" \"J♣\" #>  #> $deck #>   [1] \"A♣\"  \"8♦\"  \"9♥\"  \"6♦\"  \"Q♥\"  \"6♠\"  \"K♥\"  \"5♥\"  \"10♥\" \"7♣\"  \"8♣\"  \"K♠\"  #>  [13] \"Q♠\"  \"5♥\"  \"Q♣\"  \"2♦\"  \"8♦\"  \"2♥\"  \"8♠\"  \"3♣\"  \"2♣\"  \"9♦\"  \"8♣\"  \"10♣\" #>  [25] \"6♦\"  \"Q♥\"  \"8♥\"  \"8♦\"  \"4♥\"  \"7♦\"  \"K♣\"  \"9♣\"  \"8♠\"  \"J♥\"  \"Q♠\"  \"A♠\"  #>  [37] \"3♣\"  \"8♥\"  \"Q♣\"  \"6♥\"  \"Q♦\"  \"7♠\"  \"7♥\"  \"9♦\"  \"10♦\" \"J♠\"  \"A♥\"  \"3♠\"  #>  [49] \"10♠\" \"3♥\"  \"6♥\"  \"2♣\"  \"7♦\"  \"9♥\"  \"5♦\"  \"K♣\"  \"J♣\"  \"10♠\" \"J♣\"  \"2♣\"  #>  [61] \"4♦\"  \"J♥\"  \"5♣\"  \"K♠\"  \"Q♠\"  \"2♥\"  \"9♠\"  \"5♠\"  \"4♠\"  \"2♠\"  \"9♦\"  \"4♣\"  #>  [73] \"J♦\"  \"2♥\"  \"8♣\"  \"K♠\"  \"5♣\"  \"K♥\"  \"A♣\"  \"A♠\"  \"5♣\"  \"J♥\"  \"9♠\"  \"4♥\"  #>  [85] \"10♦\" \"4♥\"  \"A♥\"  \"3♣\"  \"6♥\"  \"K♥\"  \"Q♥\"  \"7♣\"  \"4♣\"  \"7♠\"  \"10♣\" \"10♥\" #>  [97] \"Q♦\"  \"9♣\"  \"2♦\"  \"7♥\"  \"2♥\"  \"A♠\"  \"4♠\"  \"9♣\"  \"7♦\"  \"7♠\"  \"10♠\" \"3♠\"  #> [109] \"8♠\"  \"2♦\"  \"3♦\"  \"K♥\"  \"A♥\"  \"K♠\"  \"5♥\"  \"4♠\"  \"2♣\"  \"2♠\"  \"8♠\"  \"3♦\"  #> [121] \"3♠\"  \"A♦\"  \"A♣\"  \"4♣\"  \"5♠\"  \"7♥\"  \"10♥\" \"5♠\"  \"J♦\"  \"2♦\"  \"Q♠\"  \"10♥\" #> [133] \"10♣\" \"3♥\"  \"6♠\"  \"3♠\"  \"K♦\"  \"9♣\"  \"7♣\"  \"6♠\"  \"Q♦\"  \"10♠\" \"A♦\"  \"5♦\"  #> [145] \"Q♣\"  \"3♦\"  \"9♥\"  \"6♣\"  \"9♠\"  \"8♣\"  \"6♥\"  \"10♦\" \"4♦\"  \"6♣\"  \"A♦\"  \"6♣\"  #> [157] \"J♠\"  \"7♠\"  \"3♥\"  \"5♦\"  \"7♦\"  \"J♠\"  \"3♦\"  \"J♥\"  \"9♥\"  \"Q♥\"  \"4♣\"  \"2♠\"  #> [169] \"6♠\"  \"10♦\" \"8♥\"  \"Q♦\"  \"6♦\"  \"K♦\"  \"2♠\"  \"5♣\"  \"A♦\"  \"J♦\"  \"3♥\"  \"9♦\"  #> [181] \"K♣\"  \"K♦\"  \"5♦\"  \"A♥\"  \"A♠\"  \"5♥\"  \"8♥\"  \"K♦\"  \"8♦\"  \"J♠\"  \"Q♣\"  \"6♣\"  #> [193] \"9♠\"  \"K♣\"  \"A♣\"  \"4♦\"  \"7♣\"  \"3♣\"  \"4♥\"  \"6♦\"  \"7♥\"  \"5♠\"  \"J♦\"  \"10♣\" #> [205] \"4♦\"  \"4♠\"  \"J♣\""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/blackjack.html","id":"advanced-custom-card-vector","dir":"Articles","previous_headings":"","what":"Advanced: Custom Card Vector","title":"Blackjack instruction","text":"manage cards structured way, package includes custom vctrs-based class called card_vector. class allows work cards maintaining strong type consistency formatting. Create card vector can create card_vector character vector cards: Coercion Methods can safely convert card_vector base types using vctrs coercion: Extract Card Ranks Suits Check face cards Type Compatibility card_vector integrates smoothly vctrs generics like vec_ptype2() vec_cast(): hope helps simulate, test, enjoy Blackjack fun programmable way! 🃏 Good luck virtual table!","code":"deck <- card_vector(c(\"A♠\", \"10♣\", \"K♥\")) deck #> <card_vector[3]> #> [1] [A♠]  [10♣] [K♥] # Convert to character as.character(deck) #> [1] \"A♠\"  \"10♣\" \"K♥\"  # Convert from character to card_vector char_deck <- c(\"Q♥\", \"8♣\") vec_cast(char_deck, to = card_vector()) #> [1] \"Q♥\" \"8♣\" card_rank(deck)   #> [1] \"A\"  \"10\" \"K\" card_suit(deck)   #> [1] \"♠\" \"♣\" \"♥\" card_is_face(deck)  # FALSE FALSE TRUE #> [1] FALSE FALSE  TRUE vec_ptype2(deck, deck) #> <card_vector[0]> vec_cast(deck, to = character()) #> <card_vector[3]> #> [1] [A♠]  [10♣] [K♥] vec_cast(c(\"J♣\", \"3♠\"), to = card_vector()) #> [1] \"J♣\" \"3♠\""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Design Choices in the Blackjack Package","text":"Blackjack package designed clean, extensible, robust simulation game Blackjack R users. vignette documents key architectural design decisions, including function structure, argument choices, workflow, modularity, use R’s object-oriented features.","code":""},{"path":[]},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"function-names-and-arguments","dir":"Articles","previous_headings":"Internal Modular Functions","what":"Function Names and Arguments","title":"Design Choices in the Blackjack Package","text":"function names chosen descriptive follow common naming conventions, making easy understand users different levels experience programming. function name reflects operation performs straightforward manner. arguments functions designed intuitive, minimizing need extensive documentation. names arguments chosen self-explanatory possible: - num_players num_decks play_blackjack() used define number players decks, respectively. arguments crucial customizing game based user’s preferences. dealer_hand player_hands dealer_play() deal_cards() represent hands dealer players, ensuring clarity referencing cards dealt. player_accepts insurance_bet() makes clear whether player accepted insurance bet, reflecting player’s choice.","code":""},{"path":[]},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"non-standard-evaluation-nse","dir":"Articles","previous_headings":"Internal Modular Functions > Usage of Non-standard evaluation and C++","what":"Non-standard evaluation (NSE)","title":"Design Choices in the Blackjack Package","text":"NSE used capture evaluate user input dynamically (e.g., “Hit” “Stand”), allowing flexible game flow extending package’s functionality. Modular functions, player_split() dealer_play(), ensure game aspect independent easy extend, making codebase adaptable new rules features.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"c-integration-for-performance-enhancement","dir":"Articles","previous_headings":"Internal Modular Functions > Usage of Non-standard evaluation and C++","what":"C++ Integration for Performance Enhancement","title":"Design Choices in the Blackjack Package","text":"Blackjack package integrates C++ use Rcpp efficiently handle card scoring. Specifically, cpp_score_hand function calculates total score player’s hand, iterating cards, mapping ranks values, adjusting Aces (counting either 1 11). integration allows package offload computation-heavy tasks C++, significantly improving performance, especially dealing multiple players simulations. using std::map store card values handling Aces dynamically, C++ code optimized speed, making game flow faster smoother. C++ function seamlessly exposed R, allowing users invoke directly Rcpp’s export functionality. integration minimizes overhead R’s native loops, ensuring hand-scoring operation efficient even computationally intense scenarios. Additionally, R interface ensures errors, invalid card ranks, properly handled, providing robust experience users. C++ integration thus serves performance enhancement, enabling package handle larger datasets rounds without compromising responsiveness. Future enhancements include additional optimizations deeper integration C++ aspects game.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"generic-functions","dir":"Articles","previous_headings":"Internal Modular Functions","what":"Generic functions","title":"Design Choices in the Blackjack Package","text":"Single-purpose functions: exported function one clear job (dealing, scoring, splitting, insurance, etc.), supporting easier testing extension. Composability: Outputs lists atomic values, functions can chained combined. Explicit game workflow: play_blackjack() function orchestrates setup, player turns, dealer play, scoring, reflecting real rules Blackjack. function modular, clear specific responsibility. structure allows easy testing, modification, extension package:","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"object-oriented-design-s3vctrs","dir":"Articles","previous_headings":"Internal Modular Functions > Generic functions","what":"Object-Oriented Design (S3/vctrs)","title":"Design Choices in the Blackjack Package","text":"Type safety card-related operations Attractive printing font (e.g., [♠]) Integration tidyverse/vctrs tools Supporting methods: Implemented format(), vec_ptype2(), vec_cast() methods compatibility usability. Extractors: Generic-style functions card_rank(), card_suit(), card_is_face() robust, reusable card information extraction. Card Vector Functions (like card_vector, card_rank, card_suit, card_is_face) handle representation cards provide methods extract check information . card_vector(): Creates custom vector class (card_vector) representing deck cards strings, “♠”, “10♣”, “K♥”. Usage: Takes character vector returns card_vector object. card_rank(): Extracts rank (number face value) card card_vector (e.g., “”, “10”, “Q”). Usage: Returns character vector ranks extracted card_vector. card_suit(): Extracts suit (e.g., “♠”, “♣”, “♥”) card card_vector. Usage: Returns character vector suits extracted card_vector. card_is_face(): Checks card card_vector face card (Jack, Queen, King). Usage: Returns logical vector indicating whether card face card (TRUE face cards, FALSE others).","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"game-flow-functions","dir":"Articles","previous_headings":"Internal Modular Functions > Generic functions","what":"Game Flow Functions","title":"Design Choices in the Blackjack Package","text":"functions manage overall game flow, starting game, dealing cards, managing player’s dealer’s turns. create_board(): Generates shuffled deck cards specified number decks returns shuffled deck character vector card strings (e.g., “♠”, “10♣”, “K♥”). deal_cards(): Deals 2 cards player 1 card dealer shuffled deck returns list containing player_hands, dealer_hand, remaining deck. dealer_play(): Simulates dealer’s turn, drawing cards dealer’s hand reaches 17 dealer gets 5 cards without busting, returns updated dealer’s hand remaining deck. player_split(): Allows player split pair cards two separate hands returns whether player can split cards resulting split hands. play_blackjack(): Starts interactive game Blackjack, prompting users number players, decks, actions like hit, stand, surrender, double , runs game loop managing player actions dealer behavior.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"betting-functions","dir":"Articles","previous_headings":"Internal Modular Functions > Generic functions","what":"Betting Functions","title":"Design Choices in the Blackjack Package","text":"functions manage player’s betting actions, doubling , taking insurance, surrendering. insurance_bet(): Offers player option take insurance dealer’s upcard Ace. accepted, checks dealer Blackjack calculates payout, returning result insurance bet, including payout whether insurance successful. double_down(): Allows player double bet taking exactly one card returns updated hand, new deck, validity flag (TRUE double valid). surrender_hand(): Allows player surrender forfeit half bet returns status (whether player surrendered ) associated message regarding surrender.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"scoring-functions","dir":"Articles","previous_headings":"Internal Modular Functions > Generic functions","what":"Scoring Functions","title":"Design Choices in the Blackjack Package","text":"functions calculate score player’s hand manage game’s rules scoring. score_hand(): Calculates score hand, adjusting Aces (score > 21, Ace treated 1) returns score hand, considering Ace 1 necessary. announce_winner(): Compares player scores dealer’s score announces outcome (Win, Lose, Tie), returning vector outcomes player.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"user-workflow","dir":"Articles","previous_headings":"","what":"User Workflow","title":"Design Choices in the Blackjack Package","text":"Interactive scriptable: Users can either step game interactively (play_blackjack()) call lower-level functions custom simulations analyses. Defensive programming: functions check argument types/lengths handle edge cases (e.g., invalid hands, --bounds splits). Clear feedback: Results printed readable, game-like format (e.g., final hands, scores, win/lose messages). game flow designed interactive, user making decisions stage. play_blackjack function guides user game, prompting decide whether surrender, split, double . use readline() function allows interactive user experience. action, game continues, player’s hand updated accordingly. workflow follows: Initial Setup:user prompted enter number players decks. function validates number players ensures valid number decks selected, defaulting based number players needed. Deck Creation Card Dealing: shuffled deck created using create_board() function, deal_cards() function distributes 2 cards player 1 card dealer. dealer’s first card revealed, remaining cards made available players’ actions. Insurance Option: dealer’s upcard Ace, players offered option take insurance. outcome insurance bet evaluated, including check Blackjack dealer’s part, results recorded. Player Actions: player, game proceeds series interactive prompts: Surrender: Players can opt surrender, forfeiting half bet. Split: player pair, can choose split two separate hands. Double : Players hands valued 10 11 can choose double adding single card hand. Hit/Stand: Players may continue hit (receive additional cards) stand (end turn). game ensures invalid inputs handled appropriately. Dealer’s Turn: players finished turns, dealer plays according Blackjack rules, drawing cards reaching score least 17 obtaining 5 cards without busting. dealer’s hand revealed final score calculated. Result Calculation: dealer completes turn, scores players compared dealer’s score. player’s outcome determined: Win, Lose, Tie based final score relative dealer’s hand. Round Summary Replay: results player displayed, game provides summary final hands scores. Players invited start new round end session, option adjust number decks players subsequent rounds.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Design Choices in the Blackjack Package","text":"Test Coverage: current tests focus core mechanics lack edge case handling (e.g., invalid inputs). Future work improve test coverage handle complex scenarios. Gameplay Features: Advanced betting strategies (e.g., card counting, progressive betting) multi-round tracking implemented. features added richer experience. UI/UX: text-based interface works isn’t ideal larger groups. GUI using shiny ggplot2 improve user experience. Multiplayer Functionality: Players prompted sequentially. Supporting asynchronous input larger groups enhance gameplay.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"alternative-designs","dir":"Articles","previous_headings":"","what":"Alternative designs","title":"Design Choices in the Blackjack Package","text":"Object-Oriented Design (OOP): OOP approach considered implemented, complicate code unnecessarily. function-based design chosen simplicity flexibility. Interactive GUI: GUI considered implemented due time constraints. text-based interface used simplicity, though GUI added future. Real-Time Multiplayer: Real-time multiplayer via WebSockets considered implemented keep project simpler. sequential turn-based model chosen ease use. Modular Betting Strategies: Complex betting strategies (e.g., Martingale) deferred keep game focused basic actions. added later advanced users.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"ai-vs--human-contributions","dir":"Articles","previous_headings":"","what":"AI vs. human contributions","title":"Design Choices in the Blackjack Package","text":"development package collaborative effort involving human expertise AI assistance.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"humane-contributions","dir":"Articles","previous_headings":"AI vs. human contributions","what":"Humane contributions","title":"Design Choices in the Blackjack Package","text":"development package primarily driven human expertise crafting core game logic functionality. developer designed implemented essential game functions, including play_blackjack(), dealer_play(), double_down(), others manage gameplay mechanics card dealing, player actions, determination game outcomes. developer also made critical design decisions, using function-based approach object-oriented programming, allowed clearer modularization flexibility. Additionally, human contributions encompassed writing refining package’s documentation, ensuring clear explanations functions, purposes, usage examples. testing also handled developer, focused edge cases ensuring integrity game logic.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/DesignPrinciples.html","id":"ai-contributions","dir":"Articles","previous_headings":"AI vs. human contributions","what":"AI contributions","title":"Design Choices in the Blackjack Package","text":"AI contributed significantly debugging optimization phases project. assisted identifying resolving errors encountered test execution, particularly running devtools::check() resolving issues package loading process. Additionally, AI played key role optimizing efficiency functions, particularly dealing large datasets complex operations scoring hands Blackjack game. suggesting efficient code structures practices, helped streamline game’s logic reduce redundant operations. Moreover, AI provided valuable guidance integrating C++ functions, particularly optimizing score_hand_dynamic function. assisted resolving issues C++ code compilation helped re-factor function handle card rank extraction score calculation efficiently, improving performance scenarios involving large hands multiple players. contributions, AI helped enhance functionality, performance, overall robustness package. Christy: https://chatgpt.com/share/68416bd1-d9d4-8004-a789-99d59d1aa70a Sarah: https://chatgpt.com/share/68417063-9450-8004-8166-93f23327fa4a Aditya: https://chatgpt.com/share/6842737a-0728-8011-a4f8-ef08fb7c35bd","code":""},{"path":[]},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/TeamContributions.html","id":"sarah","dir":"Articles","previous_headings":"Part 1","what":"Sarah","title":"Team Contributions Statement","text":"Set package created DESCRIPTION file. Implemented core functions: score_hand, create_board, deal_cards. Developed reviewed unit tests. Contributed README added detailed content vignette.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/TeamContributions.html","id":"aditya","dir":"Articles","previous_headings":"Part 1","what":"Aditya","title":"Team Contributions Statement","text":"Created functions player_split, insurance, determine_winner. Developed reviewed unit tests functions. Drafted initial version README vignette.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/TeamContributions.html","id":"christy","dir":"Articles","previous_headings":"Part 1","what":"Christy","title":"Team Contributions Statement","text":"Designed package logo. Implemented additional game functions: dealer_play, double_down, surrender, play_blackjack. Wrote unit tests dealer_play double_down. Performed final output checks refined vignette content.","code":""},{"path":[]},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/TeamContributions.html","id":"sarah-1","dir":"Articles","previous_headings":"Part 2","what":"Sarah","title":"Team Contributions Statement","text":"Refined Vectors, wrote tests solved errors Developed metaprogramming added dynamic rule Ace Updated functions tests metaprogramming Developed vignettes","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/TeamContributions.html","id":"aditya-1","dir":"Articles","previous_headings":"Part 2","what":"Aditya","title":"Team Contributions Statement","text":"Drafted C++ Drafted vignettes Design principles","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/articles/TeamContributions.html","id":"christy-1","dir":"Articles","previous_headings":"Part 2","what":"Christy","title":"Team Contributions Statement","text":"Crafted Card Vectors card_is_face(), card_value(), card_suit() Added missing examples part 1 Developed Readme Developed C++","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sarah Liu. Author, maintainer. Christy Lai. Author. Aditya Santosh Rao. Author.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liu S, Lai C, Aditya Santosh Rao (2025). Blackjack: Blackjack_Wallabies. R package version 0.0.0.9000.","code":"@Manual{,   title = {Blackjack: Blackjack_Wallabies},   author = {Sarah Liu and Christy Lai and {Aditya Santosh Rao}},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"https://github.com/MonashARP/game-package-wallabies/index.html","id":"blackjack-","dir":"","previous_headings":"","what":"Blackjack_Wallabies","title":"Blackjack_Wallabies","text":"package provides simple implementation Blackjack game functionalities card dealing, scoring, splitting hands, doubling , insurance betting, . allows players interactively play round Blackjack multiple players.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/index.html","id":"id_-installation","dir":"","previous_headings":"","what":"🛠 Installation","title":"Blackjack_Wallabies","text":"can install package GitHub using devtools:","code":"# Install devtools if not already installed install.packages(\"devtools\")  # Install Blackjack from GitHub devtools::install_github(\"MonashARP/game-package-wallabies\")"},{"path":"https://github.com/MonashARP/game-package-wallabies/index.html","id":"id_-features","dir":"","previous_headings":"","what":"✨ Features","title":"Blackjack_Wallabies","text":"🎮 Interactive multi-player gameplay 🃏 Configurable number decks ✅ Official Blackjack rules: Surrender Double Insurance Split Hands 🎯 Accurate hand scoring 🤵 Dealer follows house logic 🏁 End--round results outcome summary","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/index.html","id":"id_-getting-started","dir":"","previous_headings":"","what":"🚀 Getting Started","title":"Blackjack_Wallabies","text":"’s quick example start Blackjack game interactively: game, ’ll prompted enter: Number players Number decks Whether hit, stand, surrender, double , split (depending hand)","code":"library(Blackjack)  # Start a full round of Blackjack play_blackjack()"},{"path":[]},{"path":"https://github.com/MonashARP/game-package-wallabies/index.html","id":"id_-play-now","dir":"","previous_headings":"","what":"🎮 Play Now","title":"Blackjack_Wallabies","text":"Explore gameplay, test strategy, try luck — enjoy Blackjack R! Good luck, may odds favor! 🍀🃏","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/announce_winner.html","id":null,"dir":"Reference","previous_headings":"","what":"Announce Winner Function — announce_winner","title":"Announce Winner Function — announce_winner","text":"function announces winner(s) game based hand scores.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/announce_winner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Announce Winner Function — announce_winner","text":"","code":"announce_winner(player_scores, dealer_score)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/announce_winner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Announce Winner Function — announce_winner","text":"player_scores Named numeric vector player scores. dealer_score Numeric dealer score.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/announce_winner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Announce Winner Function — announce_winner","text":"Named character vector outcomes (\"Win\", \"Lose\", \"Tie\").","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/announce_winner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Announce Winner Function — announce_winner","text":"","code":"# Dealer has 18 dealer_score <- 18  # Case 1: Player1 beats dealer, Player2 busts, Player3 ties scores <- c(Player1 = 20, Player2 = 23, Player3 = 18) announce_winner(scores, dealer_score) #> Player1 Player2 Player3  #>   \"Win\"  \"Lose\"   \"Tie\"  # Expected output: # Player1 \"Win\" # Player2 \"Lose\" # Player3 \"Tie\"  # Case 2: Dealer busts, only players with <= 21 win announce_winner(c(Player1 = 17, Player2 = 22), dealer_score = 25) #> Player1 Player2  #>   \"Win\"  \"Lose\"  # Expected: # Player1 \"Win\", Player2 \"Lose\"  # Case 3: Dealer and all players bust announce_winner(c(P1 = 22, P2 = 30), dealer_score = 26) #>     P1     P2  #> \"Lose\" \"Lose\"  # Expected: both \"Lose\" (players bust regardless of dealer bust)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/as.character.card_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Coercion Method for card_vector to character — as.character.card_vector","title":"Coercion Method for card_vector to character — as.character.card_vector","text":"function converts card_vector character vector extracting underlying character data.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/as.character.card_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coercion Method for card_vector to character — as.character.card_vector","text":"","code":"# S3 method for class 'card_vector' as.character(x, ...)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/as.character.card_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coercion Method for card_vector to character — as.character.card_vector","text":"x card_vector object. ... Additional arguments passed function.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/as.character.card_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coercion Method for card_vector to character — as.character.card_vector","text":"character vector.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/as.character.card_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coercion Method for card_vector to character — as.character.card_vector","text":"","code":"# Coerce card_vector to character deck <- card_vector(c(\"A♠\", \"10♣\")) character_deck <- as.character(deck) character_deck #> [1] \"A♠\"  \"10♣\""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_is_face.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Card is a Face Card (J, Q, K) — card_is_face","title":"Check if a Card is a Face Card (J, Q, K) — card_is_face","text":"Identifies whether card card_vector face card (J, Q, K).","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_is_face.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Card is a Face Card (J, Q, K) — card_is_face","text":"","code":"card_is_face(x)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_is_face.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Card is a Face Card (J, Q, K) — card_is_face","text":"x card_vector object.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_is_face.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Card is a Face Card (J, Q, K) — card_is_face","text":"logical vector indicating whether card face card.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_is_face.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a Card is a Face Card (J, Q, K) — card_is_face","text":"","code":"# Check for face cards in a deck deck <- card_vector(c(\"A♠\", \"10♣\", \"K♥\", \"Q♠\")) card_is_face(deck) #> [1] FALSE FALSE  TRUE  TRUE"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Card Ranks — card_rank","title":"Get Card Ranks — card_rank","text":"Extracts rank (number face value) card card_vector.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Card Ranks — card_rank","text":"","code":"card_rank(x)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Card Ranks — card_rank","text":"x card_vector object.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Card Ranks — card_rank","text":"character vector containing ranks cards.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Card Ranks — card_rank","text":"","code":"# Extract card ranks from a deck deck <- card_vector(c(\"A♠\", \"10♣\", \"K♥\")) card_rank(deck) #> [1] \"A\"  \"10\" \"K\""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_suit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Card Suits — card_suit","title":"Get Card Suits — card_suit","text":"Extracts suit card card_vector.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_suit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Card Suits — card_suit","text":"","code":"card_suit(x)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_suit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Card Suits — card_suit","text":"x card_vector object.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_suit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Card Suits — card_suit","text":"character vector containing suits cards.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_suit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Card Suits — card_suit","text":"","code":"# Extract card suits from a deck deck <- card_vector(c(\"A♠\", \"10♣\", \"K♥\")) card_suit(deck) #> [1] \"♠\" \"♣\" \"♥\""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Card Vector Constructor — card_vector","title":"Card Vector Constructor — card_vector","text":"Creates custom vctrs card vector representing deck cards. card represented string like \"♠\", \"10♣\", \"K♥\", etc.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Card Vector Constructor — card_vector","text":"","code":"card_vector(x = character())"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Card Vector Constructor — card_vector","text":"x character vector cards, e.g., \"♠\", \"10♣\", \"K♥\"","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Card Vector Constructor — card_vector","text":"card_vector object class \"card_vector\", inheriting \"vctrs_vctr\"","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/card_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Card Vector Constructor — card_vector","text":"","code":"# Create a card vector with a few cards deck <- card_vector(c(\"A♠\", \"10♣\", \"K♥\")) deck #> <card_vector[3]> #> [1] [A♠]  [10♣] [K♥]"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/create_board.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Shuffled Deck of Cards — create_board","title":"Create a Shuffled Deck of Cards — create_board","text":"Create Shuffled Deck Cards","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/create_board.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Shuffled Deck of Cards — create_board","text":"","code":"create_board(num_decks = 4)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/create_board.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Shuffled Deck of Cards — create_board","text":"num_decks number decks shuffled game","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/create_board.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Shuffled Deck of Cards — create_board","text":"shuffled deck cards.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/create_board.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Shuffled Deck of Cards — create_board","text":"","code":"# Create a single shuffled deck deck1 <- create_board(1) head(deck1) #> [1] \"Q♠\"  \"6♦\"  \"3♣\"  \"10♠\" \"10♥\" \"Q♦\"   # Create and view number of cards in 6 decks deck6 <- create_board(6) length(deck6)  # Should be 312 #> [1] 312"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/dealer_play.html","id":null,"dir":"Reference","previous_headings":"","what":"Dealer's play logic according to Blackjack rules — dealer_play","title":"Dealer's play logic according to Blackjack rules — dealer_play","text":"Dealer draws cards reaching least 17, hitting 5 cards without busting.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/dealer_play.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dealer's play logic according to Blackjack rules — dealer_play","text":"","code":"dealer_play(dealer_hand, deck)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/dealer_play.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dealer's play logic according to Blackjack rules — dealer_play","text":"dealer_hand Character vector dealer's current hand deck Character vector remaining deck","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/dealer_play.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dealer's play logic according to Blackjack rules — dealer_play","text":"list updated dealer_hand deck","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/dealer_play.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dealer's play logic according to Blackjack rules — dealer_play","text":"","code":"# Basic example set.seed(123) deck <- create_board(1) dealer_hand <- c(\"A♠\", \"6♦\") result <- dealer_play(dealer_hand, deck) print(result$dealer_hand)  # Should show hand with score >= 17 #> [1] \"A♠\" \"6♦\" \"8♦\" \"4♦\"  # Dealer hits on soft 17: A♠ + 6♠ deck <- c(\"5♣\", \"2♦\", \"3♥\", \"K♠\", \"8♠\", \"9♣\")  # sample deck dealer_hand <- c(\"A♠\", \"6♠\") dealer_play(dealer_hand, deck) #> $dealer_hand #> [1] \"A♠\" \"6♠\" \"5♣\" \"2♦\" \"3♥\" #>  #> $deck #> [1] \"K♠\" \"8♠\" \"9♣\" #>"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/deal_cards.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal Cards to Players and Dealer — deal_cards","title":"Deal Cards to Players and Dealer — deal_cards","text":"Deals 2 cards player 1 card dealer. Dealer's 2nd card comes later.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/deal_cards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal Cards to Players and Dealer — deal_cards","text":"","code":"deal_cards(num_players, deck)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/deal_cards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal Cards to Players and Dealer — deal_cards","text":"num_players Number players deck shuffled deck cards","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/deal_cards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deal Cards to Players and Dealer — deal_cards","text":"list player_hands, dealer_hand (1 card), remaining deck","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/deal_cards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deal Cards to Players and Dealer — deal_cards","text":"","code":"# Example: Deal to 2 players from a fresh deck deck <- create_board(1) result <- deal_cards(num_players = 2, deck) result$player_hands  # list of two hands #> [[1]] #> [1] \"4♠\" \"5♥\" #>  #> [[2]] #> [1] \"9♠\" \"7♦\" #>  result$dealer_hand   # single card #> [1] \"7♠\" length(result$deck)  # 52 - 2*2 - 1 = 47 #> [1] 47"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/double_down.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a double down action for a player — double_down","title":"Perform a double down action for a player — double_down","text":"Player adds exactly one card initial 2-card hand.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/double_down.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a double down action for a player — double_down","text":"","code":"double_down(hand, deck)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/double_down.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a double down action for a player — double_down","text":"hand Character vector player hand deck Character vector remaining deck","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/double_down.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a double down action for a player — double_down","text":"list : new_hand player's hand drawing one additional card. deck updated deck removing one card. valid Logical indicating whether double valid (valid 2-card hands).","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/double_down.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a double down action for a player — double_down","text":"","code":"# Example setup hand <- c(\"5♠\", \"6♦\") deck <- c(\"9♣\", \"10♦\", \"3♥\")  # top of deck is 9♣  # Perform double down result <- double_down(hand, deck) result$new_hand   # Expected: c(\"5♠\", \"6♦\", \"9♣\") #> [1] \"5♠\" \"6♦\" \"9♣\" result$deck       # Expected: c(\"10♦\", \"3♥\") #> [1] \"10♦\" \"3♥\"  result$valid      # Expected: TRUE #> [1] TRUE  # Invalid example (hand is not 2 cards) double_down(c(\"5♠\", \"6♦\", \"2♥\"), deck) #> $new_hand #> [1] \"5♠\" \"6♦\" \"2♥\" #>  #> $deck #> [1] \"9♣\"  \"10♦\" \"3♥\"  #>  #> $valid #> [1] FALSE #>"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/format.card_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Method for card_vector — format.card_vector","title":"Format Method for card_vector — format.card_vector","text":"Customizes print output card_vector objects enclosing card brackets.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/format.card_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Method for card_vector — format.card_vector","text":"","code":"# S3 method for class 'card_vector' format(x, ...)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/format.card_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Method for card_vector — format.card_vector","text":"x card_vector object. ... Additional arguments passed format().","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/format.card_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Method for card_vector — format.card_vector","text":"formatted character string representing card vector.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/format.card_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Method for card_vector — format.card_vector","text":"","code":"# Format the card vector deck <- card_vector(c(\"A♠\", \"10♣\", \"K♥\")) format(deck) #> [1] \"[A♠]\"  \"[10♣]\" \"[K♥]\""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/insurance_bet.html","id":null,"dir":"Reference","previous_headings":"","what":"Offer and Resolve Insurance Bet — insurance_bet","title":"Offer and Resolve Insurance Bet — insurance_bet","text":"dealer's upcard Ace, allows player take insurance. Insurance pays 2:1 dealer Blackjack.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/insurance_bet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Offer and Resolve Insurance Bet — insurance_bet","text":"","code":"insurance_bet(dealer_hand, player_accepts)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/insurance_bet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Offer and Resolve Insurance Bet — insurance_bet","text":"dealer_hand character vector two cards (e.g., c(\"♠\", \"10♦\")) player_accepts Logical, TRUE player accepts insurance","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/insurance_bet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Offer and Resolve Insurance Bet — insurance_bet","text":"list insurance_available, insurance_paid, payout, blackjack","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/insurance_bet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Offer and Resolve Insurance Bet — insurance_bet","text":"","code":"insurance_bet(c(\"A♠\", \"10♣\"), player_accepts = TRUE) #> $insurance_available #> [1] TRUE #>  #> $insurance_paid #> [1] TRUE #>  #> $payout #> [1] 2 #>  #> $blackjack #> [1] TRUE #>  insurance_bet(c(\"A♠\", \"8♣\"), player_accepts = TRUE) #> $insurance_available #> [1] TRUE #>  #> $insurance_paid #> [1] TRUE #>  #> $payout #> [1] -1 #>  #> $blackjack #> [1] FALSE #>  insurance_bet(c(\"9♠\", \"10♣\"), player_accepts = TRUE) #> $insurance_available #> [1] FALSE #>  #> $insurance_paid #> [1] FALSE #>  #> $payout #> [1] 0 #>  #> $blackjack #> [1] FALSE #>"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/player_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Player Split Function — player_split","title":"Player Split Function — player_split","text":"Checks player's hand can split returns split hands allowed.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/player_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Player Split Function — player_split","text":"","code":"player_split(hand)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/player_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Player Split Function — player_split","text":"hand character vector two cards (e.g., c(\"♠\", \"♥\"))","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/player_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Player Split Function — player_split","text":"list : can_split Logical indicating split allowed. hands list containing either original hand two split hands.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/player_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Player Split Function — player_split","text":"","code":"# Example 1: Splitting a hand with a pair of Aces player_split(c(\"A♠\", \"A♥\")) #> $can_split #> [1] TRUE #>  #> $hands #> $hands[[1]] #> [1] \"A♠\" #>  #> $hands[[2]] #> [1] \"A♥\" #>  #>   # Example 2: Cannot split non-matching cards player_split(c(\"A♠\", \"10♠\")) #> $can_split #> [1] FALSE #>  #> $hands #> $hands[[1]] #> [1] \"A♠\"  \"10♠\" #>  #>   # Example 3: Invalid hand with more than 2 cards (split not allowed) player_split(c(\"10♠\", \"10♥\", \"5♣\")) #> $can_split #> [1] FALSE #>  #> $hands #> $hands[[1]] #> [1] \"10♠\" \"10♥\" \"5♣\"  #>  #>"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/play_blackjack.html","id":null,"dir":"Reference","previous_headings":"","what":"Play a Full Game of Blackjack Interactively — play_blackjack","title":"Play a Full Game of Blackjack Interactively — play_blackjack","text":"Asks user number players decks, plays full round Blackjack","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/play_blackjack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Play a Full Game of Blackjack Interactively — play_blackjack","text":"","code":"play_blackjack()"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/score_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Score the Cards in a Hand — score_hand","title":"Score the Cards in a Hand — score_hand","text":"Calculates total score Blackjack hand. Aces count 11 unless causes bust.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/score_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score the Cards in a Hand — score_hand","text":"","code":"score_hand(hand)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/score_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score the Cards in a Hand — score_hand","text":"hand character vector cards.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/score_hand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score the Cards in a Hand — score_hand","text":"integer representing total score.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/score_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score the Cards in a Hand — score_hand","text":"","code":"score_hand(c(\"A♠\", \"10♣\"))  # 21 #> [1] 21 score_hand(c(\"A♠\", \"A♦\", \"9♠\"))  # 21 #> [1] 21 score_hand(c(\"A♠\", \"A♦\", \"A♣\", \"10♠\"))  # 13 #> [1] 13"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/surrender_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform surrender action — surrender_hand","title":"Perform surrender action — surrender_hand","text":"Perform surrender action","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/surrender_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform surrender action — surrender_hand","text":"","code":"surrender_hand(hand, allow_surrender = TRUE)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/surrender_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform surrender action — surrender_hand","text":"hand character vector player's current hand allow_surrender Logical. TRUE game allows surrender point","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/surrender_hand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform surrender action — surrender_hand","text":"list status, payout, message","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/surrender_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform surrender action — surrender_hand","text":"","code":"# Example 1: Player surrenders with two cards and surrender is allowed surrender_hand(c(\"10♠\", \"6♦\"), TRUE) #> $status #> [1] \"surrendered\" #>  #> $payout #> [1] 0.5 #>  #> $message #> [1] \"Player surrendered. Half bet lost.\" #>   # Example 2: Surrender is not allowed surrender_hand(c(\"10♠\", \"6♦\"), FALSE) #> $status #> [1] \"played\" #>  #> $payout #> [1] 0 #>  #> $message #> [1] \"Surrender not allowed or invalid hand.\" #>   # Example 3: Hand has more than two cards (surrender invalid) surrender_hand(c(\"10♠\", \"6♦\", \"2♣\"), TRUE) #> $status #> [1] \"played\" #>  #> $payout #> [1] 0 #>  #> $message #> [1] \"Surrender not allowed or invalid hand.\" #>"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.card_vector.card_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Coercion Method for card_vector — vec_cast.card_vector.card_vector","title":"Coercion Method for card_vector — vec_cast.card_vector.card_vector","text":"Coerces card_vector object another type (e.g., character).","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.card_vector.card_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coercion Method for card_vector — vec_cast.card_vector.card_vector","text":"","code":"# S3 method for class 'card_vector.card_vector' vec_cast(x, to, ...)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.card_vector.card_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coercion Method for card_vector — vec_cast.card_vector.card_vector","text":"x card_vector object. target class cast . ... Additional arguments method dispatch.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.card_vector.card_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coercion Method for card_vector — vec_cast.card_vector.card_vector","text":"original card_vector object, converted object.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.card_vector.card_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coercion Method for card_vector — vec_cast.card_vector.card_vector","text":"","code":"# Coerce between two card_vectors deck1 <- card_vector(c(\"A♠\", \"10♣\")) deck2 <- as.character(deck1) deck3 <- vctrs::vec_cast(deck2, to = \"character\") deck3 #> [1] \"A♠\"  \"10♣\""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.card_vector.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Coercion Method for card_vector to character for later use — vec_cast.card_vector.character","title":"Coercion Method for card_vector to character for later use — vec_cast.card_vector.character","text":"Coercion method cast card_vector character vector.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.card_vector.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coercion Method for card_vector to character for later use — vec_cast.card_vector.character","text":"","code":"# S3 method for class 'card_vector.character' vec_cast(x, to, ...)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.card_vector.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coercion Method for card_vector to character for later use — vec_cast.card_vector.character","text":"x card_vector object. target class cast (character). ... Additional arguments method dispatch.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.card_vector.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coercion Method for card_vector to character for later use — vec_cast.card_vector.character","text":"character vector.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.card_vector.character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coercion Method for card_vector to character for later use — vec_cast.card_vector.character","text":"","code":"# Coerce card_vector to character deck <- card_vector(c(\"A♠\", \"10♣\")) character_deck <- vctrs::vec_cast(deck, to = \"character\") character_deck #> <card_vector[2]> #> [1] [A♠]  [10♣]"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.character.card_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Coercion Method for character to card_vector — vec_cast.character.card_vector","title":"Coercion Method for character to card_vector — vec_cast.character.card_vector","text":"Converts character vector card_vector.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.character.card_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coercion Method for character to card_vector — vec_cast.character.card_vector","text":"","code":"# S3 method for class 'character.card_vector' vec_cast(x, to, ...)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.character.card_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coercion Method for character to card_vector — vec_cast.character.card_vector","text":"x character vector. target class cast (card_vector). ... Additional arguments method dispatch.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.character.card_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coercion Method for character to card_vector — vec_cast.character.card_vector","text":"card_vector object.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_cast.character.card_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coercion Method for character to card_vector — vec_cast.character.card_vector","text":"","code":"# Coerce character vector to card_vector character_deck <- c(\"A♠\", \"10♣\") deck <- vctrs::vec_cast(character_deck, to = \"card_vector\") deck #> [1] \"A♠\"  \"10♣\""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_ptype2.card_vector.card_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Type Coercion Method for card_vector — vec_ptype2.card_vector.card_vector","title":"Type Coercion Method for card_vector — vec_ptype2.card_vector.card_vector","text":"Type coercion method card_vector ensure compatibility card_vector objects.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_ptype2.card_vector.card_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type Coercion Method for card_vector — vec_ptype2.card_vector.card_vector","text":"","code":"# S3 method for class 'card_vector.card_vector' vec_ptype2(x, y, ...)"},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_ptype2.card_vector.card_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type Coercion Method for card_vector — vec_ptype2.card_vector.card_vector","text":"x card_vector object. y Another card_vector object compare type compatibility. ... Additional arguments method dispatch.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_ptype2.card_vector.card_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Type Coercion Method for card_vector — vec_ptype2.card_vector.card_vector","text":"card_vector object, ensuring compatibility two card_vector objects.","code":""},{"path":"https://github.com/MonashARP/game-package-wallabies/reference/vec_ptype2.card_vector.card_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Type Coercion Method for card_vector — vec_ptype2.card_vector.card_vector","text":"","code":"# Type coercion method in action deck1 <- card_vector(c(\"A♠\", \"10♣\")) deck2 <- card_vector(c(\"K♥\", \"Q♠\")) vctrs::vec_ptype2(deck1, deck2) #> <card_vector[0]>"}]
