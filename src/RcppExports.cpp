// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_score_hand
int cpp_score_hand(Rcpp::CharacterVector hand);
RcppExport SEXP _Blackjack_cpp_score_hand(SEXP handSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type hand(handSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_score_hand(hand));
    return rcpp_result_gen;
END_RCPP
}
// cpp_score_hand_dynamic
int cpp_score_hand_dynamic(CharacterVector hand, std::string rule);
RcppExport SEXP _Blackjack_cpp_score_hand_dynamic(SEXP handSEXP, SEXP ruleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type hand(handSEXP);
    Rcpp::traits::input_parameter< std::string >::type rule(ruleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_score_hand_dynamic(hand, rule));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Blackjack_cpp_score_hand", (DL_FUNC) &_Blackjack_cpp_score_hand, 1},
    {"_Blackjack_cpp_score_hand_dynamic", (DL_FUNC) &_Blackjack_cpp_score_hand_dynamic, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Blackjack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
